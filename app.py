# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sx3xlM99oQxlV7G-i4bOUvRMVMSns3sZ
"""

pip install streamlit

!pip install -q sentence-transformers fuzzywuzzy

# streamlit_app.py

import streamlit as st
from sentence_transformers import SentenceTransformer, util
from fuzzywuzzy import fuzz
import numpy as np

# Load model once
@st.cache_resource
def load_model():
    return SentenceTransformer('all-MiniLM-L6-v2')

model = load_model()

# Product list
products = [
    "Green Shirt", "Blue Jeans", "Green Apple", "Red Cap", "Green Tea",
    "White Sneakers", "Black Hoodie", "Eco Water Bottle", "Organic Shampoo",
    "Laptop Backpack", "Wireless Earbuds", "Sports Watch", "Fitness Band",
    "Yoga Mat", "Leather Wallet", "Scented Candle", "Cotton Towels",
    "LED Desk Lamp", "Bluetooth Speaker", "Electric Toothbrush",
    "Running Shoes", "Bamboo Tumbler", "Travel Mug", "Green Smoothie Mix"
]

# Functions
def preprocess_query(query):
    return query.lower().strip()

def get_ai_scores(query_clean, products):
    product_embeddings = model.encode(products, convert_to_tensor=True)
    query_embedding = model.encode(query_clean, convert_to_tensor=True)
    return util.cos_sim(query_embedding, product_embeddings)[0].cpu().numpy()

def get_fuzzy_scores(query_clean, products):
    return [fuzz.token_set_ratio(query_clean, p.lower()) / 100 for p in products]

def combine_scores(cosine_scores, fuzzy_scores, products, ai_weight=0.5, fuzzy_weight=0.5):
    return [
        (products[i], ai_weight * cosine_scores[i] + fuzzy_weight * fuzzy_scores[i])
        for i in range(len(products))
    ]

def search_products(query, products, top_k=10):
    query_clean = preprocess_query(query)
    ai_scores = get_ai_scores(query_clean, products)
    fuzzy_scores = get_fuzzy_scores(query_clean, products)
    final_scores = combine_scores(ai_scores, fuzzy_scores, products)
    return sorted(final_scores, key=lambda x: x[1], reverse=True)[:top_k]

# Streamlit UI
st.title("üõçÔ∏è Smart Product Search (AI + Fuzzy Matching)")

query = st.text_input("Type a product name:", placeholder="Try 'gren tee' or 'blu jeenz'")

if query:
    results = search_products(query, products)
    st.subheader("Top Matches:")
    for name, score in results:
        st.write(f"üîπ **{name}** ‚Äî {score * 100:.2f}% match")